{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nexport default {\n  props: {\n    title: {\n      type: String,\n      default: \"Chat\"\n    },\n    initialMessages: {\n      type: Array,\n      default: () => [{\n        text: \"Willkommen im Chat!\",\n        isMine: false\n      }]\n    },\n    autoReplies: {\n      type: Object,\n      default: () => ({\n        hello: \"Hallo!\",\n        help: \"Wie kann ich helfen?\"\n      })\n    },\n    reminder: {\n      type: Object,\n      default: () => ({\n        date: null,\n        message: \"\"\n      })\n    }\n  },\n  data() {\n    return {\n      newMessage: \"\",\n      messages: []\n    };\n  },\n  created() {\n    this.messages = [...this.initialMessages];\n  },\n  methods: {\n    sendMessage() {\n      if (this.newMessage.trim() !== \"\") {\n        const userMessage = this.newMessage.trim();\n        this.messages.push({\n          text: userMessage,\n          isMine: true\n        });\n        this.newMessage = \"\";\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n        const replyKey = Object.keys(this.autoReplies).find(key => userMessage.toLowerCase().includes(key.toLowerCase()));\n        if (replyKey) {\n          this.messages.push({\n            text: this.autoReplies[replyKey],\n            isMine: false\n          });\n        }\n        if (this.reminder.date) {\n          const reminderDate = new Date(this.reminder.date);\n          const now = new Date();\n          if (reminderDate.getFullYear() === now.getFullYear() && reminderDate.getMonth() === now.getMonth() && reminderDate.getDate() === now.getDate() && reminderDate.getHours() === now.getHours() && reminderDate.getMinutes() === now.getMinutes()) {\n            this.messages.push({\n              text: this.reminder.message,\n              isMine: false\n            });\n          }\n        }\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatBox = this.$refs.chatMessages;\n        const messages = this.$refs.messageItems;\n        if (chatBox && messages && messages.length) {\n          messages[messages.length - 1].scrollIntoView({\n            behavior: \"smooth\"\n          });\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["props","title","type","String","default","initialMessages","Array","text","isMine","autoReplies","Object","hello","help","reminder","date","message","data","newMessage","messages","created","methods","sendMessage","trim","userMessage","push","$nextTick","scrollToBottom","replyKey","keys","find","key","toLowerCase","includes","reminderDate","Date","now","getFullYear","getMonth","getDate","getHours","getMinutes","chatBox","$refs","chatMessages","messageItems","length","scrollIntoView","behavior"],"sources":["/Users/tomholler/Desktop/IJ_PROJECTS/web-dev-app/frontend/src/components/ChatView.vue"],"sourcesContent":["<template>\n  <v-container class=\"chat-container\">\n    <v-card elevation=\"14\" height=\"400px\">\n      <v-card-title class=\"chat-header\">{{ title }}</v-card-title>\n      <v-card-text class=\"chat-messages\" ref=\"chatMessages\">\n        <div\n            v-for=\"(msg, index) in messages\"\n            :key=\"index\"\n            :class=\"{'my-message': msg.isMine, 'received-message': !msg.isMine}\"\n            ref=\"messageItems\"\n        >\n          <span>{{ msg.text }}</span>\n        </div>\n      </v-card-text>\n      <v-card-actions class=\"chat-input\">\n        <v-text-field\n            variant=\"outlined\"\n            v-model=\"newMessage\"\n            label=\"Nachricht...\"\n            outlined\n            dense\n            @keyup.enter=\"sendMessage\"\n            class=\"flex-grow-1\"\n        />\n        <v-btn variant=\"text\" color=\"primary\" @click=\"sendMessage\">Senden</v-btn>\n      </v-card-actions>\n    </v-card>\n  </v-container>\n</template>\n\n<script>\nexport default {\n  props: {\n    title: {\n      type: String,\n      default: \"Chat\",\n    },\n    initialMessages: {\n      type: Array,\n      default: () => [{ text: \"Willkommen im Chat!\", isMine: false }],\n    },\n    autoReplies: {\n      type: Object,\n      default: () => ({\n        hello: \"Hallo!\",\n        help: \"Wie kann ich helfen?\",\n      }),\n    },\n    reminder: {\n      type: Object,\n      default: () => ({\n        date: null,\n        message: \"\",\n      }),\n    },\n  },\n  data() {\n    return {\n      newMessage: \"\",\n      messages: [],\n    };\n  },\n  created() {\n    this.messages = [...this.initialMessages];\n  },\n  methods: {\n    sendMessage() {\n      if (this.newMessage.trim() !== \"\") {\n        const userMessage = this.newMessage.trim();\n        this.messages.push({ text: userMessage, isMine: true });\n        this.newMessage = \"\";\n\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n\n        const replyKey = Object.keys(this.autoReplies).find(key =>\n            userMessage.toLowerCase().includes(key.toLowerCase())\n        );\n        if (replyKey) {\n          this.messages.push({ text: this.autoReplies[replyKey], isMine: false });\n        }\n\n        if (this.reminder.date) {\n          const reminderDate = new Date(this.reminder.date);\n          const now = new Date();\n          if (\n              reminderDate.getFullYear() === now.getFullYear() &&\n              reminderDate.getMonth() === now.getMonth() &&\n              reminderDate.getDate() === now.getDate() &&\n              reminderDate.getHours() === now.getHours() &&\n              reminderDate.getMinutes() === now.getMinutes()\n          ) {\n            this.messages.push({ text: this.reminder.message, isMine: false });\n          }\n        }\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatBox = this.$refs.chatMessages;\n        const messages = this.$refs.messageItems;\n        if (chatBox && messages && messages.length) {\n          messages[messages.length - 1].scrollIntoView({ behavior: \"smooth\" });\n        }\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.chat-header {\n  background-color: rebeccapurple;\n  color: white;\n  padding: 10px;\n  font-weight: bold;\n  text-align: center;\n}\n\n.chat-messages {\n  height: 250px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n.my-message,\n.received-message {\n  max-width: 70%;\n  padding: 8px 12px;\n  margin: 5px;\n  border-radius: 18px;\n  word-wrap: break-word;\n}\n\n.my-message {\n  background-color: #2582d3;\n  color: white;\n  align-self: flex-end;\n  margin-left: auto;\n}\n\n.received-message {\n  background-color: #bf4343;\n  align-self: flex-start;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}